###############################################################################
# Author: Kushal Kumar Kasina
# Description:
#	This code trains a NN on the features of 59000 MNIST digits, selected from-
#   the training set. It only has 1 hidden layer with 28 neurons, achieveing u-
#   pto ~80% accuracy. More accuracy can be squeezed out, with more layers.
#   Most of the code is hard coded; for e.g., number of images chosen for trai-
#   ning and chosen for unseen data accuracy validation.
#   This is not state-of-the-art implementation. This is simply a demonstration
#   of feature extraction and training a NN on these features. This aids in fi-
#	tting the Neural Network on uC.
###############################################################################

# required modules
from keras.models import Sequential     # keras stuffs
from keras.layers import Dense          # keras stuffs
from keras.utils import np_utils        # keras stuffs
from sklearn.decomposition import PCA   # PCA algorithm
from PIL import Image                   # to see what you want it to recognize
import numpy as np                      # array ops
import time                             # imma show you fast
import random                           # random

# load training and test data from files generated by 'PCA_featureGen.py'
X_train = np.genfromtxt('X_train_features.txt', delimiter=',')
Y_train = np.genfromtxt('Y_train.txt', delimiter=',')
X_test = np.genfromtxt('X_test_features.txt', delimiter=',')
Y_test = np.genfromtxt('Y_test.txt', delimiter=',')

# load raw unseen data
X_unseenData = np.genfromtxt('X_unseenData.txt', delimiter=',')
Y_unseenData = np.genfromtxt('Y_unseenData.txt', delimiter=',')

# one hot encodinng for labels
Y_train = np_utils.to_categorical(Y_train[0:59000])
Y_test = np_utils.to_categorical(Y_test)

# definition of baseline model
def MNIST_NN_model():
	
    # create the model
	model = Sequential()
	
    # first layer with 28 neurons and 28 inputs (PCA component)
	model.add(Dense(28, input_dim=X_train.shape[1], kernel_initializer='normal', activation='relu'))

    # uncomment the line and follow on if more layers are required
    # model.add(Dense(28, kernel_initializer='normal', activation='relu'))

    # output layer with 10 classes to deal with
	model.add(Dense(10, kernel_initializer='normal', activation='softmax'))

	# compile the model
	model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

	return model

# build the baseline model
model = MNIST_NN_model()

# Fit the model
model.fit(X_train, Y_train, validation_data=(X_test, Y_test), epochs=10, batch_size=100, verbose=2)

# evaluate the model on test data
scores = model.evaluate(X_test, Y_test, verbose=0)
print("Baseline Error: %.2f%%" % (100-scores[1]*100))

# save the weights and biases for export to uC
np.savetxt('layer0_weights.txt', model.layers[0].get_weights()[0].T.reshape(28,28), delimiter=',')
np.savetxt('layer0_biases.txt', model.layers[0].get_weights()[1].T.reshape(28,1), delimiter=',')
np.savetxt('layer1_weights.txt', model.layers[1].get_weights()[0].T.reshape(10,28), delimiter=',')
np.savetxt('layer1_biases.txt', model.layers[1].get_weights()[1].T.reshape(10,1), delimiter=',')

################################################################################
# Test a few unseen images on the NN. PCA applied (obviously). Image displayed
# for manual verification.
################################################################################

# choose a random unseen image
random.seed(time.time())
digit_x = X_unseenData[random.randint(0, 1000),:].reshape(28, 28)
np.savetxt('unseenImage.txt', digit_x, delimiter=',')

# show the image
Image.fromarray(digit_x).show()

# apply PCA
testPCA = PCA(n_components=1, svd_solver = 'full', whiten=False).fit(digit_x)
testThis = np.array(testPCA.transform(digit_x)).reshape(1, 28);

# predict using the feature extracted
prediction = model.predict(testThis)
print("Prediction: " + str(np.argmax(prediction, axis=1)))
print("Prediction Array: " + str(prediction))
